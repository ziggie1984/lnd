// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payments.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteHTLCAttempts = `-- name: DeleteHTLCAttempts :exec
DELETE FROM htlc_attempts
WHERE payment_id = $1
`

func (q *Queries) DeleteHTLCAttempts(ctx context.Context, paymentID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteHTLCAttempts, paymentID)
	return err
}

const getPaymentCreation = `-- name: GetPaymentCreation :one
SELECT id, amount_msat, payment_identifier, created_at
FROM payments
WHERE payment_identifier = $1
`

func (q *Queries) GetPaymentCreation(ctx context.Context, paymentIdentifier []byte) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentCreation, paymentIdentifier)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AmountMsat,
		&i.PaymentIdentifier,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentInfo = `-- name: GetPaymentInfo :one
SELECT payment_id, payment_status
FROM payment_infos
WHERE payment_id = $1
`

func (q *Queries) GetPaymentInfo(ctx context.Context, paymentID int64) (PaymentInfo, error) {
	row := q.db.QueryRowContext(ctx, getPaymentInfo, paymentID)
	var i PaymentInfo
	err := row.Scan(&i.PaymentID, &i.PaymentStatus)
	return i, err
}

const insertFirstHopCustomRecord = `-- name: InsertFirstHopCustomRecord :exec
INSERT INTO first_hop_custom_records (
    tlv_record_id, payment_id
) VALUES (
    $1, $2
)
`

type InsertFirstHopCustomRecordParams struct {
	TlvRecordID int64
	PaymentID   int64
}

func (q *Queries) InsertFirstHopCustomRecord(ctx context.Context, arg InsertFirstHopCustomRecordParams) error {
	_, err := q.db.ExecContext(ctx, insertFirstHopCustomRecord, arg.TlvRecordID, arg.PaymentID)
	return err
}

const insertPayment = `-- name: InsertPayment :one
INSERT INTO payments (
    payment_identifier, created_at, amount_msat
) VALUES (
    $1, $2, $3
) RETURNING id
`

type InsertPaymentParams struct {
	PaymentIdentifier []byte
	CreatedAt         time.Time
	AmountMsat        int64
}

func (q *Queries) InsertPayment(ctx context.Context, arg InsertPaymentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertPayment, arg.PaymentIdentifier, arg.CreatedAt, arg.AmountMsat)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertPaymentRequest = `-- name: InsertPaymentRequest :exec
INSERT INTO payment_requests (
    payment_id, payment_request
) VALUES (
    $1, $2
)
`

type InsertPaymentRequestParams struct {
	PaymentID      int64
	PaymentRequest []byte
}

func (q *Queries) InsertPaymentRequest(ctx context.Context, arg InsertPaymentRequestParams) error {
	_, err := q.db.ExecContext(ctx, insertPaymentRequest, arg.PaymentID, arg.PaymentRequest)
	return err
}

const insertTLVRecord = `-- name: InsertTLVRecord :one
INSERT INTO tlv_records (
    key, value
) VALUES (
    $1, $2
) RETURNING id
`

type InsertTLVRecordParams struct {
	Key   int64
	Value []byte
}

func (q *Queries) InsertTLVRecord(ctx context.Context, arg InsertTLVRecordParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertTLVRecord, arg.Key, arg.Value)
	var id int64
	err := row.Scan(&id)
	return id, err
}
